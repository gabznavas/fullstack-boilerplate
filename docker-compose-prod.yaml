version: '3.9'

services:
  backend-build:
    build:
      context: ./api
      dockerfile: Dockerfile
    image: gabrielnavas/aws-api:v1.0.0
    profiles:
      - build

  web-build:
    build:
      context: ./web
      dockerfile: Dockerfile
    image: gabrielnavas/aws-web:v1.0.0
    profiles:
      - build

  backend:
    image: gabrielnavas/aws-api:v1.0.0
    container_name: aws-sbackend
    ports:
      - "8080:8080" # opcional, s√≥ se quiser acessar do host
    networks:
      - app-network

  frontend:
    image: gabrielnavas/aws-web:v1.0.0
    container_name: aws-frontend
    environment:
      NEXT_PUBLIC_API_URL: http://backend:8080
    networks:
      - app-network

  redis-cache:
    image: redis:latest
    container_name: redis-cache
    ports:
      - "6379:6379"
    networks:
      - app-network

  postgres-database:
    image: postgres:latest
    container_name: postgres-database
    ports:
      - "5490:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    networks:
      - app-network
    depends_on:
      - backend
      - redis-cache
    volumes:
      - ./database/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/postgres/db_data:/var/lib/postgresql/data

  reverse-proxy:
    image: nginx:latest
    container_name: nginx-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infra/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infra/nginx/certs:/etc/nginx/certs:ro
    depends_on:
      - frontend
      - backend
      - postgres-database
      - redis-cache
    networks:
      - app-network

networks:
  app-network:
    driver: bridge
